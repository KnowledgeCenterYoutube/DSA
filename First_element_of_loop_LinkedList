// Find first element of loop in linked list
// C++

#include <iostream>
using namespace std;

struct Node {
    int data;
    Node *next;
    Node(int d=0): data(d), next(nullptr){}
};

Node* fist_node_loop(Node* head){
    if(!head || !head->next) return nullptr;
    Node *slow = head;
    Node *fast = head;
    while(fast && fast->next){
        slow = slow->next;
        fast = fast->next->next;
        if(slow == fast) //--> loop
            break;
    }
    if(slow != fast )
        return nullptr;
    
    slow = head;
    while(slow != fast){
        slow = slow->next;
        fast = fast->next;
    }
    return fast;
}

// 1->2->3->4->5->6->NULL
int main(){
    Node n1(1), n2(2), n3(3), n4(4), n5(5), n6(6), n7(7), n8(8);
    n1.next = &n2;
    n2.next = &n3;
    n3.next = &n4;
    n4.next = &n5;
    n5.next = &n6;
    n6.next = &n7;
    n7.next = &n8;
    n8.next = &n3;
    
    //TODO: 
    Node* first_node = fist_node_loop(&n1);
    if (first_node) cout << first_node->data << endl;
    else cout << "No loop" << endl;
}
